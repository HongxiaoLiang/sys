/*
********************************************************************************************
头文件名：      　　String.h
头文件名称：        字符串函数
文件版本：　　      1.0
文件功能：
　　　　本文件是字符串函数的头部文件。
文件说明：
　　　　１．本文件中的所有标识符定义前缀字母表示意义如下：
　　　　　　c  ---------- 常量
　　　　　　v  ---------- 变量
　　　　　　g  ---------- 全局变量（Global）
            s  ---------- 静态变量（Static）
　　　　　　l  ---------- 局部变量（Local）
　　　　　　uc ---------- 数据类型（Unsigned Char）
　　　　　　ui ---------- 数据类型（Unsigned Word）
　　　　　　p  ---------- 指针
　　　　　　st ---------- 数据体
　　　　　　pt ---------- 指向数据体的指针
            Pre --------- 条件编译预定义
　　　　２．本文件的所有函数都是可重入性函数。

编译工具软件：      IAR Embedded Workbench for Atmel AVR 版本：5.20A 以上
链接文件：          １．SysCfg.h ------------ 系统运行结构定义配置的头文件。


----------------------------------------------------------------------------------------
头文件版本历史：

********************************************************************************************
*/


/*==========================================================================================
下面两条指令是本头部文件条件编译的预处理指令，用于防止本头部文件被其他文件重复引用。
==========================================================================================*/
#ifndef _MYSTRING_H_                            // “_MYSTRING_H_”条件编译开始
#define _MYSTRING_H_


/*==========================================================================================
　　　　　　　　　　　　　　     本头部文件包括的其他头文件
建议：包含本项目的文件使用 #include "文件名.扩展名" ，
　　　包含系统库的文件使用 #include <文件名.扩展名> 。
==========================================================================================*/
#include "SysConfig.h"                           // 系统运行结构定义配置的头文件


/*==========================================================================================
下面这三条指令是用于区分编译系统为 C++ 或 C 的预处理指令。
"__cplusplus" 为 C++ 预处理器名字，这三条指令表明接在其下面的那些指令为 C 程序特征。
==========================================================================================*/
#ifdef __cplusplus
extern "C" {
#endif


/*==========================================================================================
                                  全局变量数据结构类型定义
==========================================================================================*/
/*--------------------------------------------------------------------------------------
时钟时间变量数据结构类型定义:
--------------------------------------------------------------------------------------*/
#define TimeClockDefaults  \
{          \
  0x00,    \
  0x00,    \
  0x00,    \
}                                             // 时钟时间变量的默认初始化值
typedef struct
{
  unsigned char Hou;                          // 小时时间变量
  unsigned char Min;                          // 分钟时间变量
  unsigned char Sec;                          // 秒时间变量
} TimeClock_Stru;

typedef TimeClock_Stru  *TimeClockHandle_Stru;// 指向时钟时间变量结构体的指针变量



/*==========================================================================================
                                 源程序文件中的函数原型声明
==========================================================================================*/

/*--------------------------------------------------------------------------------------
函数名称：　　复制字符串的字节数据从 SRAM 到 SRAM 中
函数功能：　　本函数是将字符串的字节数据从源 SRAM 复制到目标 SRAM 中的函数。
函数入口参数：*pSource ------ 存储在 SRAM 中的源数据的首个地址指针。
              *pObject ------ 存储在 SRAM 中的目标数据的首个地址指针。
函数返回值：　复制字符串的的数据字节长度（个数）。
调用函数：　　１．
备注：        １．注意：“*pSource”存储区长度必须大于等于“*pObject”存储区长度。
--------------------------------------------------------------------------------------*/
extern unsigned char StrCopySramToSram(void *pSource, void *pObject);

extern unsigned int  StrCopySramToSram2(void *pSource, void *pObject);

/*--------------------------------------------------------------------------------------
函数名称：　　复制字符串的字节数据从 const 到 SRAM 中
函数功能：　　本函数是将字符串的字节数据从源 const 复制到目标 SRAM 中的函数。
函数入口参数：*pSource ------ 存储在 const 中的源数据的首个地址指针。
              *pObject ------ 存储在 SRAM 中的目标数据的首个地址指针。
函数返回值：　复制字符串的的数据字节长度（个数）。
调用函数：　　１．
备注：        １．注意：“*pSource”存储区长度必须大于等于“*pObject”存储区长度。
--------------------------------------------------------------------------------------*/
extern unsigned char StrCopyFlashToSram(void const *pSource, void *pObject);

extern unsigned int  StrCopyFlashToSram2(void const *pSource, void *pObject);

/*--------------------------------------------------------------------------------------
函数名称：　　在字符串 *pSource 中搜索与字符串 *pTarget 匹配的子字符串。
函数功能：    本函数是在字符串 *pSource 中搜索与字符串 *pTarget 匹配的子字符串。如果找到匹配
　　　　　　　的子字符串，返回 *pSource 中的子字符串的起始地址指针；否则返回 NULL。
函数入口参数：*pSource ------ 指向存储在 SRAM 中的源字符串的首个地址指针。
              *pTarget ------ 指向存储在 SRAM 中的目标字符串的首个地址指针。
函数返回值：　“*pSource 中的子字符串的起始地址指针”表示搜索到匹配的子字符串；
              “NULL”                               表示没有搜索到匹配的子字符串。
调用函数：　　１．
备注：        １．
--------------------------------------------------------------------------------------*/
extern void *StrStr(void *pSource, void *pTarget);

/*--------------------------------------------------------------------------------------
函数名称：　　在字符串 *pSource 中搜索与 const 存储器中字符串 *pTarget 匹配的子字符串。
函数功能：    本函数是在字符串 *pSource 中搜索与字符串 *pTarget 匹配的子字符串。如果找到匹配
　　　　　　　的子字符串，返回 *pSource 中的子字符串的起始地址指针；否则返回 NULL。
函数入口参数：*pSource ------ 指向存储在 SRAM 中的源字符串的首个地址指针。
              *pTarget ------ 指向存储在 const 中的目标字符串的首个地址指针。
函数返回值：　“*pSource 中的子字符串的起始地址指针”表示搜索到匹配的子字符串；
              “NULL”                               表示没有搜索到匹配的子字符串。
调用函数：　　１．
备注：        １．
--------------------------------------------------------------------------------------*/
extern void *StrStrFlash(void *pSource, void const *pTarget);

extern void *StrAscFlash(void *pSource, void const *pTarget, unsigned short SrcLen);

extern void *StrUscFlash(void *pSource, void const *pTarget, unsigned char TarLen, unsigned short SrcLen);
/*--------------------------------------------------------------------------------------
函数名称：　　在字符串 *pSource 中搜索与 const 存储器中字符串 *pTarget 匹配的子字符串。
函数功能：    本函数是在字符串 *pSource 中搜索与字符串 *pTarget 匹配的子字符串。如果找到匹配
　　　　　　　的子字符串，返回 *pSource 中的子字符串的起始地址指针；否则返回 NULL。
函数入口参数：*pSource ------ 指向存储在 SRAM 中的源字符串的首个地址指针。
              *pTarget ------ 指向存储在 const 中的目标字符串的首个地址指针。
函数返回值：　“*pSource 中的子字符串的起始地址指针”表示搜索到匹配的子字符串；
              “NULL”                               表示没有搜索到匹配的子字符串。
调用函数：　　１．
备注：        １．
--------------------------------------------------------------------------------------*/
extern unsigned char StrStrFlashLen(void *pSource, void const *pTarget);

extern unsigned char StrAscFlashLen(void *pSource, void const *pTarget, unsigned short SrcLen);

extern unsigned char StrUscFlashLen(void *pSource, void const *pTarget, unsigned char TarLen, unsigned short SrcLen);
/*--------------------------------------------------------------------------------------
函数名称：　　Unicode 码的字符串转换为十六进制时钟格式。
函数功能：    本函数用于将 Unicode 码的时间格式字符串转换为十六进制时钟格式。
函数入口参数：*Ucs2Str ------- 指向存储 Unicode 码的时间格式字符串的指针。
              Separator ------ 时间格式的分隔符号，一般为“:”(0x003A)。
              *pstDst -------- 指向存储十六进制时钟格式的指针。
函数返回值：　“TRUE ”表示转换操作成功；
　　　　　　　“FALSE”表示转换操作失败。
调用函数：　　１．
备注：        １．Unicode 字符串时钟时间格式：[Ｘ][Ｘ]:[Ｘ][Ｘ]:[Ｘ][Ｘ]，分隔符为:(0x003A)
--------------------------------------------------------------------------------------*/
extern unsigned char Ucs2StrDecodeClock(Uchar8           *Ucs2Str,
                                        Uint16           Separator,
                                        TimeClock_Stru   *pstDst);



/*--------------------------------------------------------------------------------------
函数名称：　　在字符串 *pSource 中搜索与字符串 *pTarget 匹配的子字符串。
函数功能：    本函数是在字符串 *pSource 中搜索与字符串 *pTarget 匹配的子字符串。如果找到匹配
　　　　　　　的子字符串，返回 *pSource 中的子字符串的起始地址指针；否则返回 NULL。
函数入口参数：*pSource ------ 指向存储在 SRAM 中的源字符串的首个地址指针。
              *pTarget ------ 指向存储在 SRAM 中的目标字符串的首个地址指针。
函数返回值：　“*pSource 中的子字符串的起始地址指针”表示搜索到匹配的子字符串；
              “NULL”                               表示没有搜索到匹配的子字符串。
调用函数：　　１．
备注：        １．
--------------------------------------------------------------------------------------*/
unsigned short StringLen(void const *pSource);

/*--------------------------------------------------------------------------------------
函数名称：　　两个8进制组合成Unicode 码
函数功能：　　本函数两个8进制组合成Unicode 码
函数入口参数：*pSrc  --------  指向存储源字符串缓冲区的指针。
  　　　　　　*pDest --------- 指向存储目标数据（十六进制数）缓冲区的指针。
　　　　　　　strLen -------   源字符串的数据字节长度（长度数值必需为偶数）。
函数返回值：　没有
调用函数：　　１.
备注：        １．
--------------------------------------------------------------------------------------*/
void CharHexConvUsc(const void *pSource, void *pTarget, const unsigned char strLen);

/*--------------------------------------------------------------------------------------
函数名称：　　对两个字符串进行比较，然后返回比较结果
函数功能：　　本函数用于对两个字符串进行比较，然后返回比较结果
函数入口参数：*pSrc  --------  指向存储源字符串缓冲区的指针。
  　　　　　　*pDest --------- 指向存储目标数据（十六进制数）缓冲区的指针。
函数返回值：　没有
调用函数：　　１.
备注：        １．
--------------------------------------------------------------------------------------*/
int StrCmp(const unsigned char* str1, const unsigned char* str2);

/*==========================================================================================
下面这三条指令是用于与上面三条区分编译系统为 C++ 或 C 的预处理指令相对应。用于指定
 extern "C" 链接指示符作用域，此处的"}"与上面的"{"相对应，为链接指示符作用结束符。
==========================================================================================*/
#ifdef __cplusplus
}
#endif


#endif                                        // “_STRING_H_”条件编译结束


/*
********************************************************************************************
                                     本头部文件到此结束
********************************************************************************************
*/

