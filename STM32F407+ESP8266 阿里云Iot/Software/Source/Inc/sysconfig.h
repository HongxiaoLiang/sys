/*
********************************************************************************************
版权所有 (C)，2010－2010，泉州禾逸电子有限公司
----------------------------------------------------------------------------------------
头文件名：        　sysconfig.h
头文件名称：      　系统运行结构定义配置的头文件
文件版本：　　      1.0
文件功能：
　　　　
文件说明：
　　　　１．本文件中的所有标识符定义前缀字母表示意义如下：
	 	c  ---------- 常量
　　　　　　v  ---------- 变量
			en ---------- 枚举
　　　　　　g  ---------- 全局变量（Global）
            s  ---------- 静态变量（Static）
　　　　　　l  ---------- 局部变量（Local）
　　　　　　uc ---------- 数据类型（Unsigned Char）
　　　　　　ui ---------- 数据类型（Unsigned Word）
　　　　　　p  ---------- 指针
　　　　　　st ---------- 数据体
　　　　　　pt ---------- 指向数据体的指针
            Pre --------- 条件编译预定义
            
            stru -------- 定义数据体
            enum -------- 定义枚举
　　　　２．

主要函数列表：


编译工具软件：      ［］
链接文件：          ▲．目标器件芯片的头文件

编作者：            
编作者 E-Mail：     
编制日期：          
----------------------------------------------------------------------------------------
头文件版本历史：
2010年12月7日 -------- 版本 1.0 ：发行版本
********************************************************************************************
*/



/*==========================================================================================
下面两条指令是本头文件条件编译的预处理指令，用于防止本头文件被其他文件重复引用。
==========================================================================================*/
#ifndef _SYS_CONFIG_H_                        // “_SYS_CFG_H_”条件编译开始
#define _SYS_CONFIG_H_


/*==========================================================================================
　　　　　　　　　　　　　　        本源程序包括的头文件
建议：包含本项目的文件使用 #include "文件名.扩展名" ，
　　　包含系统库的文件使用 #include <文件名.扩展名> 。
==========================================================================================*/
#include    "stm32f4xx.h"



/*==========================================================================================
下面这三条指令是用于区分编译系统为 C++ 或 C 的预处理指令。
"__cplusplus" 为 C++ 预处理器名字，这三条指令表明接在其下面的那些指令为 C 程序特征。
==========================================================================================*/
#ifdef __cplusplus
extern "C" {
#endif


/*==========================================================================================
                                系统运行的各类字符化常数定义
==========================================================================================*/


/*--------------------------------------------------------------------------------------
系统参数的字符化常数定义：
--------------------------------------------------------------------------------------*/




/*==========================================================================================
为了做到较好的软件可移植性，推荐用户在编程时使用下面定义的数据类型大小
==========================================================================================*/

typedef unsigned char         BOOLEAN;        // 定义【布尔（逻辑）】数据类型

typedef char                  char8;          // char8   代表【有符号字符】数据类型
typedef unsigned char         Uchar8;         // Uchar8  代表【无符号字符】数据类型
typedef short int             int16;          // int16   代表【有符号整数】数据类型
typedef unsigned short int    Uint16;         // Uint16  代表【无符号整数】数据类型
typedef long int              int32;          // int32   代表【有符号长整数】数据类型
typedef unsigned long int     Uint32;         // Uint32  代表【无符号长整数】数据类型


typedef union
{
    Uint16 word;
    Uchar8 bytes[2];
    struct
    {
      Uchar8 low;   // 低字节
      Uchar8 high;  // 高字节
      // 0x0001    low = 0x01,high = 0x00;
    } byte;

    struct
    {
        unsigned char bit0:1;
        unsigned char bit1:1;
        unsigned char bit2:1;
        unsigned char bit3:1;
        unsigned char bit4:1;
        unsigned char bit5:1;
        unsigned char bit6:1;
        unsigned char bit7:1;
        unsigned char bit8:1;
        unsigned char bit9:1;
        unsigned char bit10:1;
        unsigned char bit11:1;
        unsigned char bit12:1;
        unsigned char bit13:1;
        unsigned char bit14:1;
        unsigned char bit15:1;
    } bits;

} WORD_BYTES;

typedef union 
{
    Uint32 dword;
    Uint16 words[2];
    Uchar8 bytes[4];
    struct
    {
      Uint16 low;
      Uint16 high;
    } word;
    struct
    {
      Uchar8 LB;
      Uchar8 HB;
      Uchar8 UB;
      Uchar8 MB;
    } byte;
    /*
    struct
    {
        unsigned char bit0:1;
        unsigned char bit1:1;
        unsigned char bit2:1;
        unsigned char bit3:1;
        unsigned char bit4:1;
        unsigned char bit5:1;
        unsigned char bit6:1;
        unsigned char bit7:1;
        unsigned char bit8:1;
        unsigned char bit9:1;
        unsigned char bit10:1;
        unsigned char bit11:1;
        unsigned char bit12:1;
        unsigned char bit13:1;
        unsigned char bit14:1;
        unsigned char bit15:1;
        unsigned char bit16:1;
        unsigned char bit17:1;
        unsigned char bit18:1;
        unsigned char bit19:1;
        unsigned char bit20:1;
        unsigned char bit21:1;
        unsigned char bit22:1;
        unsigned char bit23:1;
        unsigned char bit24:1;
        unsigned char bit25:1;
        unsigned char bit26:1;
        unsigned char bit27:1;
        unsigned char bit28:1;
        unsigned char bit29:1;
        unsigned char bit30:1;
        unsigned char bit31:1;
    } bits;
    */
} DWORD_BYTES;




/*--------------------------------------------------------------------------------------
位操作定义（用于变量中某一位的直接置位／清除位），推荐置位／清除位的语句为：
①．变量名称 |= BITn;       置位操作（将变量与下面的位定义值进行按位或运算）
②．变量名称 &= ~BITn;      清除位操作（将变量与下面的位定义值的非值进行按位与运算）
--------------------------------------------------------------------------------------*/
#define BIT0                  0x01            // BIT0      = (1<<1)   = 0b00000001
#define BIT1                  0x02            // BIT1      = (1<<2)   = 0b00000010
#define BIT2                  0x04            // BIT2      = (1<<3)   = 0b00000100
#define BIT3                  0x08            // BIT3      = (1<<4)   = 0b00001000
#define BIT4                  0x10            // BIT4      = (1<<5)   = 0b00010000
#define BIT5                  0x20            // BIT5      = (1<<6)   = 0b00100000
#define BIT6                  0x40            // BIT6      = (1<<7)   = 0b01000000
#define BIT7                  0x80            // BIT7      = (1<<8)   = 0b10000000

#define NotBIT0               0xFE            // NotBIT0  = ~(1<<1)  = 0b11111110
#define NotBIT1               0xFD            // NotBIT1  = ~(1<<2)  = 0b11111101
#define NotBIT2               0xFB            // NotBIT2  = ~(1<<3)  = 0b11111011
#define NotBIT3               0xF7            // NotBIT3  = ~(1<<4)  = 0b11110111
#define NotBIT4               0xEF            // NotBIT4  = ~(1<<5)  = 0b11101111
#define NotBIT5               0xDF            // NotBIT5  = ~(1<<6)  = 0b11011111
#define NotBIT6               0xBF            // NotBIT6  = ~(1<<7)  = 0b10111111
#define NotBIT7               0x7F            // NotBIT7  = ~(1<<8)  = 0b01111111



/*--------------------------------------------------------------------------------------
常用的字符化常数定义：
--------------------------------------------------------------------------------------*/
#ifndef __cplusplus
typedef enum {FALSE = 0, TRUE = !FALSE} bool;
#endif

#define NULL                  0               // 定义“NULL”字符值为 0

/*#ifndef	TRUE
#define TRUE                  1               // 定义“TRUE” 字符值为 1
#endif

#ifndef	FALSE
#define FALSE                 0               // 定义“FALSE”字符值为 0
#endif*/

#define ON                    1               // 定义“ON” 字符值为 1
#define OFF                   0               // 定义“OFF”字符值为 0

#define HIGH                  1               // 定义“HIGH”字符值为 1
#define LOW                   0               // 定义“LOW” 字符值为 0

#ifndef	SET
#define SET                   1
#endif

#ifndef	CLEAR
#define CLEAR                 0
#endif

#define EMPTY                 1
#define FILL                  0

#define HORIZONTAL            1               // 定义“水平”字符值为 1
#define VERTICAL              0               // 定义“垂直”字符值为 0



/*==========================================================================================
二进制数定义（方便有些编译器不支持二进制数操作）：
==========================================================================================*/


/*--------------------------------------------------------------------------------------
定义系统处理的数据位字长度大小：
--------------------------------------------------------------------------------------*/
#define cSysDataBits          8               // 定义系统数据位的字长数
//#define cSysDataBits          16              // 定义系统数据位的字长数
//#define cSysDataBits          32              // 定义系统数据位的字长数
//#define cSysDataBits          64              // 定义系统数据位的字长数
#if   (cSysDataBits == 8)
#define cSysCharMax           0xFF            // 定义系统数据一个字节的最大值
#define cSysShiftBits         3               // 定义系统数据位的乘除运算时的移位数
#elif (cSysDataBits == 16)
#define cSysCharMax           0xFFFF          // 定义系统数据一个字节的最大值
#define cSysShiftBits         4               // 定义系统数据位的乘除运算时的移位数
#elif (cSysDataBits == 32)
#define cSysCharMax           0xFFFFFFFF      // 定义系统数据一个字节的最大值
#define cSysShiftBits         5               // 定义系统数据位的乘除运算时的移位数
#elif (cSysDataBits == 64)
#define cSysCharMax           0xFFFFFFFFFFFFFFFF// 定义系统数据一个字节的最大值
#define cSysShiftBits         6               // 定义系统数据位的乘除运算时的移位数
#endif

#define cSysBitHigh           BIT7            // BIT7      = (1<<8)   = 0b10000000
#define cSysBitLow            BIT0            // BIT0      = (1<<1)   = 0b00000001

/*--------------------------------------------------------------------------------------
系统运行时钟【单位：Hz】的字符化常数定义配置：
--------------------------------------------------------------------------------------*/
//#define cSysCpuClock          18432000UL      // 定义系统运行时钟【单位：Hz】
//#define cCpuClockDelay        18432           // 定义延时函数的时钟配置【去掉尾数０之后的数】
//#define cSysCpuClock          14745600UL      // 定义系统运行时钟【单位：Hz】
//#define cCpuClockDelay        147456          // 定义延时函数的时钟配置【去掉尾数０之后的数】
//#define cSysCpuClock          11059200UL      // 定义系统运行时钟【单位：Hz】
//#define cCpuClockDelay        110592          // 定义延时函数的时钟配置【去掉尾数０之后的数】
//#define cSysCpuClock          7372800UL       // 定义系统运行时钟【单位：Hz】
//#define cCpuClockDelay        73728           // 定义延时函数的时钟配置【去掉尾数０之后的数】
//#define cSysCpuClock          3686400UL       // 定义系统运行时钟【单位：Hz】
//#define cCpuClockDelay        36864           // 定义延时函数的时钟配置【去掉尾数０之后的数】
//#define cSysCpuClock          1843200UL       // 定义系统运行时钟【单位：Hz】
//#define cCpuClockDelay        18432           // 定义延时函数的时钟配置【去掉尾数０之后的数】

//#define cSysClockReduction    8UL             // 定义系统运行时钟降低运行倍数





/*==========================================================================================
                                      条件编译控制声明
==========================================================================================*/
//#define PreDebug                              // 全局调试声明


//#define PreGlobalParameterDefaults              // 全局启用恢复默认设置参数声明

/*--------------------------------------------------------------------------------------
声明锁定寄存器变量给“RtcTimer.c（应用内部定时器计时的实时时钟）”使用的条件定义：
--------------------------------------------------------------------------------------*/
//#define PreLockedRegisterToRtcTimer           // “（RtcTimer.c）使用寄存器变量”条件定义





/*==========================================================================================
                      各类字符化常数和硬件设计相关的输入／输出引脚定义
==========================================================================================*/
/*--------------------------------------------------------------------------------------
延时函数的字符化常数定义配置：
--------------------------------------------------------------------------------------*/





/*==========================================================================================
                                  全局变量数据结构类型定义
==========================================================================================*/



/*==========================================================================================
                                        全局常量声明
==========================================================================================*/





/*==========================================================================================
                                        全局变量声明
==========================================================================================*/



/*==========================================================================================
下面这三条指令是用于与上面三条区分编译系统为 C++ 或 C 的预处理指令相对应。用于指定
 extern "C" 链接指示符作用域，此处的"}"与上面的"{"相对应，为链接指示符作用结束符。
==========================================================================================*/
#ifdef __cplusplus
}
#endif


#endif                                        // “_SYS_CONFIG_H_”条件编译结束


/*
********************************************************************************************
                                     本头文件到此结束
********************************************************************************************
*/

