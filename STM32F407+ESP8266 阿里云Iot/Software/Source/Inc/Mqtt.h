/*
********************************************************************************************
 版权所有 (C)，2011－2015，泉州禾逸电子有限公司
----------------------------------------------------------------------------------------
头文件名：        　Mqtt.h
头文件名称：      　MQTT的头文件
文件版本：　　      1.0
文件功能：
　　　　本文件是对   的各硬件技术标准、电路设计结构和软件运行参数，进行定义配置的
　　头文件。
文件说明：
　　　　１．本文件中的所有标识符定义前缀字母表示意义如下：
	 	        c  ---------- 常量
　　　　　　v  ---------- 变量
			      en ---------- 枚举
　　　　　　g  ---------- 全局变量（Global）
            s  ---------- 静态变量（Static）
　　　　　　l  ---------- 局部变量（Local）
　　　　　　uc ---------- 数据类型（Unsigned Char）
　　　　　　ui ---------- 数据类型（Unsigned Word）
　　　　　　p  ---------- 指针
　　　　　　st ---------- 数据体
　　　　　　pt ---------- 指向数据体的指针
            Pre --------- 条件编译预定义
            
            stru -------- 定义数据体
            enum -------- 定义枚举
　　　　２．

主要函数列表：


编译工具软件：      ［］
链接文件：          ▲．目标器件芯片的头文件

编作者：            
编作者 E-Mail：     
编制日期：          
----------------------------------------------------------------------------------------
头文件版本历史：

********************************************************************************************
*/



/*==========================================================================================
下面两条指令是本头文件条件编译的预处理指令，用于防止本头文件被其他文件重复引用。
==========================================================================================*/
#ifndef _Mqtt_H_                        // “_Mqtt_H_”条件编译开始
#define _Mqtt_H_


/*==========================================================================================
　　　　　　　　　　　　　　        本源程序包括的头文件
建议：包含本项目的文件使用 #include "文件名.扩展名" ，
　　　包含系统库的文件使用 #include <文件名.扩展名> 。
==========================================================================================*/
#include "stm32f4xx.h"                         		// 目标器件芯片的头文件
#include "sysconfig.h"                     		// 系统配置的头文件
#include "Main.h"                         		// 主程序的头文件



/*==========================================================================================
下面这三条指令是用于区分编译系统为 C++ 或 C 的预处理指令。
"__cplusplus" 为 C++ 预处理器名字，这三条指令表明接在其下面的那些指令为 C 程序特征。
==========================================================================================*/
#ifdef __cplusplus
extern "C" {
#endif



/*==========================================================================================
                                系统运行的各类字符化常数定义
==========================================================================================*/

/*--------------------------------------------------------------------------------------
为了做到较好的软件可移植性，推荐用户在编程时使用下面定义的数据类型大小
--------------------------------------------------------------------------------------*/
#define  cMqttBuffSize    512      // 定义缓冲区长度
#define  cMqttRxBufNum      8      // 接收缓冲区个数
#define  cMqttTxBufNum      8      // 发送缓冲区个数
#define  cMqttCmdBufNum     8      // 命令缓冲区个数

#define  MqttTxData(x)  EspAt_TxData(x)


/*--------------------------------------------------------------------------------------
的字符化常数定义
--------------------------------------------------------------------------------------*/


/*==========================================================================================
                                      条件编译控制声明
==========================================================================================*/
//#define PreDebug                              // 全局调试声明



/*--------------------------------------------------------------------------------------
声明 的条件定义：
--------------------------------------------------------------------------------------*/







/*==========================================================================================
                      各类字符化常数和硬件设计相关的输入／输出引脚定义
==========================================================================================*/

/*--------------------------------------------------------------------------------------
的输入／输出引脚定义：
--------------------------------------------------------------------------------------*/


/*==========================================================================================
                                  全局变量数据结构类型定义
==========================================================================================*/
/*--------------------------------------------------------------------------------------
Mqtt状态的全局标志定义：
--------------------------------------------------------------------------------------*/
typedef struct
{
  u8  ConnectFlag:       1;   // 同服务器连接状态  0: 未连接   1: 连接
  u8  ReConnectFlag:     1;   // 重连服务器状态   0: 连接不存在 0: 连接断开，重连
  u8  ConnectPackFlag:   1;   // CONNECT报文状态  1: Connect报文成功
  u8  SubcribePackFlag:  1;   // 订阅报文状态     1: 订阅报文成功
}MqttStateBits;


/*--------------------------------------------------------------------------------------
MQTT数据的全局数据结构类型定义：
--------------------------------------------------------------------------------------*/
typedef struct
{
  u8   RxDataBuf[cMqttRxBufNum][cMqttBuffSize];     // 数据的接收缓冲区
  u8   *RxDataInPtr;                                // 指向缓冲区存放的位置
  u8   *RxDataOutPtr;                               // 指向缓冲区读取数据的位置
  u8   *RxDataEndPtr;                               // 指向缓冲区结束的位置

  u8   TxDataBuf[cMqttTxBufNum][cMqttBuffSize];     // 数据的接收缓冲区
  u8   *TxDataInPtr;                                // 指向缓冲区存放的位置
  u8   *TxDataOutPtr;                               // 指向缓冲区读取数据的位置
  u8   *TxDataEndPtr;                               // 指向缓冲区结束的位置

  u8   CmdDataBuf[cMqttCmdBufNum][cMqttBuffSize];    // 数据的接收缓冲区
  u8   *CmdDataInPtr;                                // 指向缓冲区存放的位置
  u8   *CmdDataOutPtr;                               // 指向缓冲区读取数据的位置
  u8   *CmdDataEndPtr;                               // 指向缓冲区结束的位置

  /* MQTT 数据 */
  u16  FixedLen;              // 固定报头长度
  u16  VariableLen;           // 可变报头长度
  u16  PayloadLen;            // 有效负荷长度
  u8   TxBuff[cMqttBuffSize];  // 发送数据缓冲区 

  u8   PingFlag;               // ping报文状态，    0: 正常状态，1: Ping报文已发送
}MqttDataStru;


/*--------------------------------------------------------------------------------------
设备信息的全局数据结构类型定义：
--------------------------------------------------------------------------------------*/
/* 用户设备信息，需自己手动填入 */
typedef struct
{
  u8   ProductKey[20];    // 产品ID
  u8   ProductKeyLen;     // 产品ID长度

  u8   DeviceName[20];    // 设备名
  u8   DeviceNameLen;     // 设备名长度

  u8   DeviceSecre[64];   // 设备密钥
  u8   DeviceSecreLen;    // 设备密钥长度

  u8   SubTopicName[128]; // 需要定要的主题
  u8   PubTopicName[128]; // 需要发布的主题
}DeviceMsgStru;


/*--------------------------------------------------------------------------------------
网络信息数据的全局数据结构类型定义：
--------------------------------------------------------------------------------------*/
typedef struct
{
  u8   ClientId[128];            // 客户端ID的缓冲区
  u16  ClientIdLen;              // 客户端ID的长度
  u8   UserName[128];            // 用户名的缓冲区
  u16  UserNameLen;              // 用户名长度
  u8   Passward[128];            // 密码缓冲区
  u16  PasswardLen;              //  密码长度
  u8   ServerIp[128];            // 服务器IP或是域名
  u16  ServerPort;               // 服务端的端口号 
}UserNetMsgStru;


/*==========================================================================================
                                        全局常量声明
==========================================================================================*/



/*==========================================================================================
                                        全局变量声明
==========================================================================================*/

/*--------------------------------------------------------------------------------------
MQTT状态标书全局变量声明:
--------------------------------------------------------------------------------------*/
extern MqttStateBits  gbitMqtt;

/*--------------------------------------------------------------------------------------
MQTT数据的全局数据结构的全局变量声明：
--------------------------------------------------------------------------------------*/
extern MqttDataStru gstvMqtt;

/*--------------------------------------------------------------------------------------
设备信息数据的全局数据结构的全局变量声明：
--------------------------------------------------------------------------------------*/
extern DeviceMsgStru gstvDevice;

/*--------------------------------------------------------------------------------------
网络信息数据的全局数据结构的全局变量声明：
--------------------------------------------------------------------------------------*/
extern UserNetMsgStru gstvUserNet;



/*==========================================================================================
                                 源程序文件中的函数原型声明
==========================================================================================*/
/*
********************************************************************************************
                             　       程序指令代码清单
********************************************************************************************
*/
/*----------------------------------------------------------*/
/*函数名：初始化接收,发送,命令数据的 缓冲区 以及各状态参数  */
/*参  数：无                                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MqttBuff_Init(void);


/*----------------------------------------------------------*/
/*函数名：重新初始化接收,发送,命令缓冲区 以及各状态参数     */
/*参  数：无                                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MqttBufRe_Init(void);


/*----------------------------------------------------------*/
/*函数名：阿里云初始化参数，得到客户端ID，用户名和密码      */
/*参  数：无                                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void AliIotParameter_Init(void);


/*----------------------------------------------------------*/
/*函数名：连接服务器报文                                    */
/*参  数：无                                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MqttSendConnectPack(void);


/*----------------------------------------------------------*/
/*函数名：SUBSCRIBE订阅topic报文                            */
/*参  数：QoS：订阅等级                                     */
/*参  数：topic_name：订阅topic报文名称                     */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MqttSendSubscribe(u8  *topic_name, int Qos);


/*----------------------------------------------------------*/
/*函数名：PING报文，心跳包                                  */
/*参  数：无                                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MqttSendPingReq(void);


/*----------------------------------------------------------*/
/*函数名：等级0 发布消息报文                                */
/*参  数：topic_name：topic名称                             */
/*参  数：data：数据                                        */
/*参  数：data_len：数据长度                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MqttSendPublishQs0(u8  *topic, char *data, u16 data_len);


/*----------------------------------------------------------*/
/*函数名：处理服务器发来的等级0的推送                       */
/*参  数：redata：接收的数据                                */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void MQTTRecDealPushdataQs0(unsigned char *redata);


/*----------------------------------------------------------*/
/*函数名：处理发送缓冲区                                    */
/*参  数：data：数据                                        */
/*参  数：size：数据长度                                    */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void TxDataBuf_Deal(unsigned char *data, int size);


/*----------------------------------------------------------*/
/*函数名：处理命令缓冲区                                    */
/*参  数：data：数据                                        */
/*参  数：size：数据长度                                    */
/*返回值：无                                                */
/*----------------------------------------------------------*/
void CMDBuf_Deal(unsigned char *data, int size);


/*==========================================================================================
下面这三条指令是用于与上面三条区分编译系统为 C++ 或 C 的预处理指令相对应。用于指定
 extern "C" 链接指示符作用域，此处的"}"与上面的"{"相对应，为链接指示符作用结束符。
==========================================================================================*/
#ifdef __cplusplus
}
#endif


#endif                                        // “_Mqtt_H_”条件编译结束


/*
********************************************************************************************
                                     本头文件到此结束
********************************************************************************************
*/




